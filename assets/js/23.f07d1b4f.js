(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{375:function(t,n,a){"use strict";a.r(n);var s=a(42),e=Object(s.a)({},(function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[t._v("Load balancing，即负载均衡，是一种计算机技术，用来在多个计算机（计算机集群）、网络连接、CPU、磁盘驱动器或其他资源中分配负载，以达到最优化资源使用、最大化吞吐率、最小化响应时间、同时避免过载的目的。")]),t._v(" "),a("h2",{attrs:{id:"常用均衡工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用均衡工具"}},[t._v("#")]),t._v(" 常用均衡工具")]),t._v(" "),a("p",[t._v("Nginx/LVS/HAProxy 是目前使用最广泛的三种负载均衡软件。")]),t._v(" "),a("h3",{attrs:{id:"nginx-实现负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-实现负载均衡"}},[t._v("#")]),t._v(" nginx 实现负载均衡")]),t._v(" "),a("div",{staticClass:"language-yml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#user  nobody;")]),t._v("\nworker_processes  4;\nevents "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 最大并发数")]),t._v("\n    worker_connections  1024;\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 待选服务器列表")]),t._v("\n    upstream myproject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ip_hash指令，将同一用户引入同一服务器。")]),t._v("\n        ip_hash;\n        server 125.219.42.4 fail_timeout=60s;\n        server 172.31.2.183;\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监听端口")]),t._v("\n                listen 80;\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 根目录下")]),t._v("\n                location / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 选择哪个服务器列表")]),t._v("\n                    proxy_pass http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//myproject;\n                "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),a("h2",{attrs:{id:"负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡算法"}},[t._v("#")]),t._v(" 负载均衡算法")]),t._v(" "),a("p",[t._v("负载均衡算法可以分为两类：静态负载均衡算法和动态负载均衡算法。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("静态负载均衡算法： 轮询，比率，优先权")]),t._v(" "),a("ul",[a("li",[t._v("轮询（Round Robin）：顺序循环将请求一次顺序循环地连接每个服务器。当其中某个服务器发生第二到第 7 层的故障，BIG-IP 就把其从顺序循环队列中拿出，不参加下一次的轮询，直到其恢复正常。")]),t._v(" "),a("li",[t._v("比率（Ratio）：给每个服务器分配一个加权值为比例，根椐这个比例，把用户的请求分配到每个服务器。当其中某个服务器发生第二到第 7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配, 直到其恢复正常。")]),t._v(" "),a("li",[t._v("优先权（Priority）：给所有服务器分组,给每个组定义优先权，BIG-IP 用户的请求，分配给优先级最高的服务器组（在同一组内，采用轮询或比率算法，分配用户的请求）；当最高优先级中所有服务器出现故障，BIG-IP 才将请求送给次优先级的服务器组。这种方式，实际为用户提供一种热备份的方式。")])])]),t._v(" "),a("li",[a("p",[t._v("动态负载均衡算法包括: 最少连接数,最快响应速度，观察方法，预测法，动态性能分配，动态服务器补充，服务质量，服务类型，规则模式。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("最少的连接方式（Least Connection）：传递新的连接给那些进行最少连接处理的服务器。当其中某个服务器发生第二到第 7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配, 直到其恢复正常。")])]),t._v(" "),a("li",[a("p",[t._v("最快模式（Fastest）：传递连接给那些响应最快的服务器。当其中某个服务器发生第二到第 7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。")])]),t._v(" "),a("li",[a("p",[t._v("观察模式（Observed）：连接数目和响应时间以这两项的最佳平衡为依据为新的请求选择服务器。当其中某个服务器发生第二到第 7 层的故障，BIG-IP 就把其从服务器队列中拿出，不参加下一次的用户请求的分配，直到其恢复正常。")])]),t._v(" "),a("li",[a("p",[t._v("预测模式（Predictive）：BIG-IP 利用收集到的服务器当前的性能指标，进行预测分析，选择一台服务器在下一个时间片内，其性能将达到最佳的服务器相应用户的请求。(被 BIG-IP 进行检测)")])]),t._v(" "),a("li",[a("p",[t._v("动态性能分配(Dynamic Ratio-APM)：BIG-IP 收集到的应用程序和应用服务器的各项性能参数，动态调整流量分配。")])]),t._v(" "),a("li",[a("p",[t._v("动态服务器补充(Dynamic Server Act.)：当主服务器群中因故障导致数量减少时，动态地将备份服务器补充至主服务器群。")])]),t._v(" "),a("li",[a("p",[t._v("服务质量(QoS）：按不同的优先级对数据流进行分配。")])]),t._v(" "),a("li",[a("p",[t._v("服务类型(ToS)：按不同的服务类型（在 Type of Field 中标识）负载均衡对数据流进行分配。")])]),t._v(" "),a("li",[a("p",[t._v("规则模式：针对不同的数据流设置导向规则，用户可自行。")])])])])]),t._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/fanBlog/p/10936190.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("什么是负载均衡？"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/alterem/p/11490367.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("【Nginx】实现负载均衡的几种方式"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[t._v("Round-robin"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);